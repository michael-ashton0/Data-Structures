using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;

namespace StackPrac
{
    /// <summary>
    /// introduce variables
    /// </summary>
    public class Stack<T> : IEnumerable<T>
    {
        private T[] stack;
        private int capacity;
        private int next;

        /// <summary>
        /// Initialize capacity to 64 in this stack
        /// </summary>
        /// <param name="capacity">indicates the maximum number of elements the stack can hold</param>
        public Stack(int capacity = 10)
        {
            stack = new T[capacity];
            this.capacity = capacity;
            this.next = 0;
        }

        /// <summary>
        /// returns the number of elements in the stack
        /// </summary>
        public int Count
        {
            get
            {
                return this.next;
            }
        }

        /// <summary>
        /// returns the number of elements the stack can hold
        /// </summary>
        public int Capacity
        {
            get
            {
                return stack.Length;
            }
        }
        /// <summary>
        /// Resizes the stack as needed
        /// </summary>
        /// <param name="newCapacity">indicates the new value of capacity</param>
        private void Resize(int newCapacity)
        {
            if (Count >= capacity)
            {
                T[] newStack = new T[newCapacity];
                for (int index = 0; index < Count; index++)
                {
                    newStack[index] = stack[index];
                }
                stack = newStack;
                capacity = newCapacity; 
            }
        }
        /// <summary>
        /// adds to the top of stack, if full returns error
        /// </summary>
        /// <param name="item">the value to be pushed to the stack</param>
        public void Push(T item)
        {
            if (Count >= capacity)
            {
                Resize(Capacity * 2);
            }
            stack[next] = item;
            next++;
        }

        /// <summary>
        /// takes from the top of stack, if empty returns error
        /// </summary>
        /// <returns></returns>
        /// <exception cref="InvalidOperationException">thrown when trying to take from a stack that
        /// has no values enclosed</exception>
        public T Pop()
        {
            if (Count == 0)
            {
                throw new InvalidOperationException($"Stack is empty and cannot return a value");
            }

            if (Count < Capacity / 4)
            {
                Resize(Capacity / 2);
            }
            T value = stack[next - 1];
            next--;
            return value;
        }

        /// <summary>
        /// returns the top value of the stack
        /// </summary>
        /// <returns></returns>

        public T Peek()
        {
            return stack[next - 1];
        }

        /// <summary>
        /// checks to see if the stack contains any values
        /// </summary>
        /// <returns></returns>
        public bool IsEmpty()
        {
            return this.next == 0;
        }
        public IEnumerator<T> GetEnumerator()
        {
            for (int i = next -1; i >= 0; i--)
            {
                yield return stack[i]; // lines 124 and 125 are the changeable parts, otherwise all other
                //enumerator functions will be identical
            }
        }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <summary>
        /// returns the number of stored elements in the stack with textual context
        /// </summary>
        /// <returns></returns>
        /* The following method was generated by chatgpt under the prompt of my old ToString method
         alongside the new specification to list each value in the stack */
        public override string ToString()
        {
            StringBuilder result = new StringBuilder($"MyStack<{typeof(T).Name}> is {Count}/{Capacity} full: ");

            for (int i = 0; i < Count; i++)
            {
                result.Append(stack[i]);
                if (i < Count - 1)
                {
                    result.Append(", ");
                }
            }

            result.Append($" with a total of {Count} values stored in it");

            return result.ToString();
        }



        /// <summary>
        /// I do not understand the enumerator I could not figure out how they were supposed to work 
        /// worked both working with microsoft.com and chatgpt so I have left my initial interpretation
        /// of the instructions below
        /// </summary>
        /// <returns></returns>
        /* public IEnumerator<T> GetEnumerator()
         {
             return new StackEnumerator(stack, Count);
         }
        */
    }
}

        
